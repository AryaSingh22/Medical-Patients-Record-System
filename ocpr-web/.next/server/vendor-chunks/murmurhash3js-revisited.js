/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/murmurhash3js-revisited";
exports.ids = ["vendor-chunks/murmurhash3js-revisited"];
exports.modules = {

/***/ "(ssr)/./node_modules/murmurhash3js-revisited/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/murmurhash3js-revisited/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/murmurHash3js */ \"(ssr)/./node_modules/murmurhash3js-revisited/lib/murmurHash3js.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVybXVyaGFzaDNqcy1yZXZpc2l0ZWQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsb0lBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Nwci13ZWIvLi9ub2RlX21vZHVsZXMvbXVybXVyaGFzaDNqcy1yZXZpc2l0ZWQvaW5kZXguanM/MmY4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL211cm11ckhhc2gzanMnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/murmurhash3js-revisited/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/murmurhash3js-revisited/lib/murmurHash3js.js":
/*!*******************************************************************!*\
  !*** ./node_modules/murmurhash3js-revisited/lib/murmurHash3js.js ***!
  \*******************************************************************/
/***/ (function(module, exports) {

eval("/* jshint -W086: true */\n// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n;(function (root, undefined) {\n    'use strict';\n\n    // Create a local object that'll be exported or referenced globally.\n    var library = {\n        'version': '3.0.0',\n        'x86': {},\n        'x64': {},\n        'inputValidation': true\n    };\n\n    // PRIVATE FUNCTIONS\n    // -----------------\n\n    function _validBytes(bytes) {\n        // check the input is an array or a typed array\n        if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {\n            return false;\n        }\n\n        // check all bytes are actually bytes\n        for (var i = 0; i < bytes.length; i++) {\n            if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _x86Multiply(m, n) {\n        //\n        // Given two 32bit ints, returns the two multiplied together as a\n        // 32bit int.\n        //\n\n        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n    }\n\n    function _x86Rotl(m, n) {\n        //\n        // Given a 32bit int and an int representing a number of bit positions,\n        // returns the 32bit int rotated left by that number of positions.\n        //\n\n        return (m << n) | (m >>> (32 - n));\n    }\n\n    function _x86Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x86 mix of that block.\n        //\n\n        h ^= h >>> 16;\n        h = _x86Multiply(h, 0x85ebca6b);\n        h ^= h >>> 13;\n        h = _x86Multiply(h, 0xc2b2ae35);\n        h ^= h >>> 16;\n\n        return h;\n    }\n\n    function _x64Add(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // added together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] + n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] + n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] + n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += m[0] + n[0];\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Multiply(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // multiplied together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] * n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] * n[3];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[2] += m[3] * n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] * n[3];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[2] * n[2];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[3] * n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Rotl(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) rotated left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 32) {\n            return [m[1], m[0]];\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n        } else {\n            n -= 32;\n            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n        }\n    }\n\n    function _x64LeftShift(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) shifted left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 0) {\n            return m;\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n        } else {\n            return [m[1] << (n - 32), 0];\n        }\n    }\n\n    function _x64Xor(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // xored together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        return [m[0] ^ n[0], m[1] ^ n[1]];\n    }\n\n    function _x64Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x64 mix of that block.\n        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n        // only place where we need to right shift 64bit ints.)\n        //\n\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n\n        return h;\n    }\n\n    // PUBLIC FUNCTIONS\n    // ----------------\n\n    library.x86.hash32 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 32 bit hash\n        // using the x86 flavor of MurmurHash3, as an unsigned int.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n        seed = seed || 0;\n\n        var remainder = bytes.length % 4;\n        var blocks = bytes.length - remainder;\n\n        var h1 = seed;\n\n        var k1 = 0;\n\n        var c1 = 0xcc9e2d51;\n        var c2 = 0x1b873593;\n\n        for (var i = 0; i < blocks; i = i + 4) {\n            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n\n            h1 ^= k1;\n            h1 = _x86Rotl(h1, 13);\n            h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n        }\n\n        k1 = 0;\n\n        switch (remainder) {\n            case 3:\n                k1 ^= bytes[i + 2] << 16;\n\n            case 2:\n                k1 ^= bytes[i + 1] << 8;\n\n            case 1:\n                k1 ^= bytes[i];\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= bytes.length;\n        h1 = _x86Fmix(h1);\n\n        return h1 >>> 0;\n    };\n\n    library.x86.hash128 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n\n        seed = seed || 0;\n        var remainder = bytes.length % 16;\n        var blocks = bytes.length - remainder;\n\n        var h1 = seed;\n        var h2 = seed;\n        var h3 = seed;\n        var h4 = seed;\n\n        var k1 = 0;\n        var k2 = 0;\n        var k3 = 0;\n        var k4 = 0;\n\n        var c1 = 0x239b961b;\n        var c2 = 0xab0e9789;\n        var c3 = 0x38b34ae5;\n        var c4 = 0xa1e38b93;\n\n        for (var i = 0; i < blocks; i = i + 16) {\n            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n            k2 = (bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);\n            k3 = (bytes[i + 8]) | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);\n            k4 = (bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n            h1 ^= k1;\n\n            h1 = _x86Rotl(h1, 19);\n            h1 += h2;\n            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n            k2 = _x86Multiply(k2, c2);\n            k2 = _x86Rotl(k2, 16);\n            k2 = _x86Multiply(k2, c3);\n            h2 ^= k2;\n\n            h2 = _x86Rotl(h2, 17);\n            h2 += h3;\n            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n            k3 = _x86Multiply(k3, c3);\n            k3 = _x86Rotl(k3, 17);\n            k3 = _x86Multiply(k3, c4);\n            h3 ^= k3;\n\n            h3 = _x86Rotl(h3, 15);\n            h3 += h4;\n            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n            k4 = _x86Multiply(k4, c4);\n            k4 = _x86Rotl(k4, 18);\n            k4 = _x86Multiply(k4, c1);\n            h4 ^= k4;\n\n            h4 = _x86Rotl(h4, 13);\n            h4 += h1;\n            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n        }\n\n        k1 = 0;\n        k2 = 0;\n        k3 = 0;\n        k4 = 0;\n\n        switch (remainder) {\n            case 15:\n                k4 ^= bytes[i + 14] << 16;\n\n            case 14:\n                k4 ^= bytes[i + 13] << 8;\n\n            case 13:\n                k4 ^= bytes[i + 12];\n                k4 = _x86Multiply(k4, c4);\n                k4 = _x86Rotl(k4, 18);\n                k4 = _x86Multiply(k4, c1);\n                h4 ^= k4;\n\n            case 12:\n                k3 ^= bytes[i + 11] << 24;\n\n            case 11:\n                k3 ^= bytes[i + 10] << 16;\n\n            case 10:\n                k3 ^= bytes[i + 9] << 8;\n\n            case 9:\n                k3 ^= bytes[i + 8];\n                k3 = _x86Multiply(k3, c3);\n                k3 = _x86Rotl(k3, 17);\n                k3 = _x86Multiply(k3, c4);\n                h3 ^= k3;\n\n            case 8:\n                k2 ^= bytes[i + 7] << 24;\n\n            case 7:\n                k2 ^= bytes[i + 6] << 16;\n\n            case 6:\n                k2 ^= bytes[i + 5] << 8;\n\n            case 5:\n                k2 ^= bytes[i + 4];\n                k2 = _x86Multiply(k2, c2);\n                k2 = _x86Rotl(k2, 16);\n                k2 = _x86Multiply(k2, c3);\n                h2 ^= k2;\n\n            case 4:\n                k1 ^= bytes[i + 3] << 24;\n\n            case 3:\n                k1 ^= bytes[i + 2] << 16;\n\n            case 2:\n                k1 ^= bytes[i + 1] << 8;\n\n            case 1:\n                k1 ^= bytes[i];\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= bytes.length;\n        h2 ^= bytes.length;\n        h3 ^= bytes.length;\n        h4 ^= bytes.length;\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        h1 = _x86Fmix(h1);\n        h2 = _x86Fmix(h2);\n        h3 = _x86Fmix(h3);\n        h4 = _x86Fmix(h4);\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n    };\n\n    library.x64.hash128 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n        seed = seed || 0;\n\n        var remainder = bytes.length % 16;\n        var blocks = bytes.length - remainder;\n\n        var h1 = [0, seed];\n        var h2 = [0, seed];\n\n        var k1 = [0, 0];\n        var k2 = [0, 0];\n\n        var c1 = [0x87c37b91, 0x114253d5];\n        var c2 = [0x4cf5ad43, 0x2745937f];\n\n        for (var i = 0; i < blocks; i = i + 16) {\n            k1 = [(bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24), (bytes[i]) |\n                (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24)];\n            k2 = [(bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24), (bytes[i + 8]) |\n                (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24)];\n\n            k1 = _x64Multiply(k1, c1);\n            k1 = _x64Rotl(k1, 31);\n            k1 = _x64Multiply(k1, c2);\n            h1 = _x64Xor(h1, k1);\n\n            h1 = _x64Rotl(h1, 27);\n            h1 = _x64Add(h1, h2);\n            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n            k2 = _x64Multiply(k2, c2);\n            k2 = _x64Rotl(k2, 33);\n            k2 = _x64Multiply(k2, c1);\n            h2 = _x64Xor(h2, k2);\n\n            h2 = _x64Rotl(h2, 31);\n            h2 = _x64Add(h2, h1);\n            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n        }\n\n        k1 = [0, 0];\n        k2 = [0, 0];\n\n        switch (remainder) {\n            case 15:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));\n\n            case 14:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));\n\n            case 13:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));\n\n            case 12:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));\n\n            case 11:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));\n\n            case 10:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));\n\n            case 9:\n                k2 = _x64Xor(k2, [0, bytes[i + 8]]);\n                k2 = _x64Multiply(k2, c2);\n                k2 = _x64Rotl(k2, 33);\n                k2 = _x64Multiply(k2, c1);\n                h2 = _x64Xor(h2, k2);\n\n            case 8:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));\n\n            case 7:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));\n\n            case 6:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));\n\n            case 5:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));\n\n            case 4:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));\n\n            case 3:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));\n\n            case 2:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));\n\n            case 1:\n                k1 = _x64Xor(k1, [0, bytes[i]]);\n                k1 = _x64Multiply(k1, c1);\n                k1 = _x64Rotl(k1, 31);\n                k1 = _x64Multiply(k1, c2);\n                h1 = _x64Xor(h1, k1);\n        }\n\n        h1 = _x64Xor(h1, [0, bytes.length]);\n        h2 = _x64Xor(h2, [0, bytes.length]);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        h1 = _x64Fmix(h1);\n        h2 = _x64Fmix(h2);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n    };\n\n    // INITIALIZATION\n    // --------------\n\n    // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n    // of the global object.\n    if (true) {\n\n        if ( true && module.exports) {\n            exports = module.exports = library;\n        }\n\n        exports.murmurHash3 = library;\n\n    } else {}\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVybXVyaGFzaDNqcy1yZXZpc2l0ZWQvbGliL211cm11ckhhc2gzanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QixZQUFZO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsSUFBOEI7O0FBRXRDLFlBQVksS0FBNkI7QUFDekM7QUFDQTs7QUFFQSxRQUFRLG1CQUFtQjs7QUFFM0IsTUFBTSxLQUFLLEVBcUJOO0FBQ0wsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL29jcHItd2ViLy4vbm9kZV9tb2R1bGVzL211cm11cmhhc2gzanMtcmV2aXNpdGVkL2xpYi9tdXJtdXJIYXNoM2pzLmpzPzMyOWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IC1XMDg2OiB0cnVlICovXG4vLyArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbi8vIHwgbXVybXVySGFzaDNqcy5qcyB2My4wLjEgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BpZC9tdXJtdXJIYXNoM2pzXG4vLyB8IEEgamF2YXNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBNdXJtdXJIYXNoMydzIHg4NiBoYXNoaW5nIGFsZ29yaXRobXMuIHxcbi8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuLy8gfCBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNSBLYXJhbiBMeW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbi8vIHwgaHR0cHM6Ly9naXRodWIuY29tL2thcmFubHlvbnMvbXVybXVySGFzaDMuanMvYmxvYi9jMTc3OGY3NTc5MmFiZWY3YmRkNzRiYzg1ZDJkNGUxYTNkMjVjZmU5L211cm11ckhhc2gzLmpzIHxcbi8vIHwgRnJlZWx5IGRpc3RyaWJ1dGFibGUgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG5cbjsoZnVuY3Rpb24gKHJvb3QsIHVuZGVmaW5lZCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIENyZWF0ZSBhIGxvY2FsIG9iamVjdCB0aGF0J2xsIGJlIGV4cG9ydGVkIG9yIHJlZmVyZW5jZWQgZ2xvYmFsbHkuXG4gICAgdmFyIGxpYnJhcnkgPSB7XG4gICAgICAgICd2ZXJzaW9uJzogJzMuMC4wJyxcbiAgICAgICAgJ3g4Nic6IHt9LFxuICAgICAgICAneDY0Jzoge30sXG4gICAgICAgICdpbnB1dFZhbGlkYXRpb24nOiB0cnVlXG4gICAgfTtcblxuICAgIC8vIFBSSVZBVEUgRlVOQ1RJT05TXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGZ1bmN0aW9uIF92YWxpZEJ5dGVzKGJ5dGVzKSB7XG4gICAgICAgIC8vIGNoZWNrIHRoZSBpbnB1dCBpcyBhbiBhcnJheSBvciBhIHR5cGVkIGFycmF5XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShieXRlcykgJiYgIUFycmF5QnVmZmVyLmlzVmlldyhieXRlcykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGFsbCBieXRlcyBhcmUgYWN0dWFsbHkgYnl0ZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGJ5dGVzW2ldKSB8fCBieXRlc1tpXSA8IDAgfHwgYnl0ZXNbaV0gPiAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3g4Nk11bHRpcGx5KG0sIG4pIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gR2l2ZW4gdHdvIDMyYml0IGludHMsIHJldHVybnMgdGhlIHR3byBtdWx0aXBsaWVkIHRvZ2V0aGVyIGFzIGFcbiAgICAgICAgLy8gMzJiaXQgaW50LlxuICAgICAgICAvL1xuXG4gICAgICAgIHJldHVybiAoKG0gJiAweGZmZmYpICogbikgKyAoKCgobSA+Pj4gMTYpICogbikgJiAweGZmZmYpIDw8IDE2KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfeDg2Um90bChtLCBuKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEdpdmVuIGEgMzJiaXQgaW50IGFuZCBhbiBpbnQgcmVwcmVzZW50aW5nIGEgbnVtYmVyIG9mIGJpdCBwb3NpdGlvbnMsXG4gICAgICAgIC8vIHJldHVybnMgdGhlIDMyYml0IGludCByb3RhdGVkIGxlZnQgYnkgdGhhdCBudW1iZXIgb2YgcG9zaXRpb25zLlxuICAgICAgICAvL1xuXG4gICAgICAgIHJldHVybiAobSA8PCBuKSB8IChtID4+PiAoMzIgLSBuKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3g4NkZtaXgoaCkge1xuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiBhIGJsb2NrLCByZXR1cm5zIG11cm11ckhhc2gzJ3MgZmluYWwgeDg2IG1peCBvZiB0aGF0IGJsb2NrLlxuICAgICAgICAvL1xuXG4gICAgICAgIGggXj0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBfeDg2TXVsdGlwbHkoaCwgMHg4NWViY2E2Yik7XG4gICAgICAgIGggXj0gaCA+Pj4gMTM7XG4gICAgICAgIGggPSBfeDg2TXVsdGlwbHkoaCwgMHhjMmIyYWUzNSk7XG4gICAgICAgIGggXj0gaCA+Pj4gMTY7XG5cbiAgICAgICAgcmV0dXJuIGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3g2NEFkZChtLCBuKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEdpdmVuIHR3byA2NGJpdCBpbnRzIChhcyBhbiBhcnJheSBvZiB0d28gMzJiaXQgaW50cykgcmV0dXJucyB0aGUgdHdvXG4gICAgICAgIC8vIGFkZGVkIHRvZ2V0aGVyIGFzIGEgNjRiaXQgaW50IChhcyBhbiBhcnJheSBvZiB0d28gMzJiaXQgaW50cykuXG4gICAgICAgIC8vXG5cbiAgICAgICAgbSA9IFttWzBdID4+PiAxNiwgbVswXSAmIDB4ZmZmZiwgbVsxXSA+Pj4gMTYsIG1bMV0gJiAweGZmZmZdO1xuICAgICAgICBuID0gW25bMF0gPj4+IDE2LCBuWzBdICYgMHhmZmZmLCBuWzFdID4+PiAxNiwgblsxXSAmIDB4ZmZmZl07XG4gICAgICAgIHZhciBvID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIG9bM10gKz0gbVszXSArIG5bM107XG4gICAgICAgIG9bMl0gKz0gb1szXSA+Pj4gMTY7XG4gICAgICAgIG9bM10gJj0gMHhmZmZmO1xuXG4gICAgICAgIG9bMl0gKz0gbVsyXSArIG5bMl07XG4gICAgICAgIG9bMV0gKz0gb1syXSA+Pj4gMTY7XG4gICAgICAgIG9bMl0gJj0gMHhmZmZmO1xuXG4gICAgICAgIG9bMV0gKz0gbVsxXSArIG5bMV07XG4gICAgICAgIG9bMF0gKz0gb1sxXSA+Pj4gMTY7XG4gICAgICAgIG9bMV0gJj0gMHhmZmZmO1xuXG4gICAgICAgIG9bMF0gKz0gbVswXSArIG5bMF07XG4gICAgICAgIG9bMF0gJj0gMHhmZmZmO1xuXG4gICAgICAgIHJldHVybiBbKG9bMF0gPDwgMTYpIHwgb1sxXSwgKG9bMl0gPDwgMTYpIHwgb1szXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3g2NE11bHRpcGx5KG0sIG4pIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gR2l2ZW4gdHdvIDY0Yml0IGludHMgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKSByZXR1cm5zIHRoZSB0d29cbiAgICAgICAgLy8gbXVsdGlwbGllZCB0b2dldGhlciBhcyBhIDY0Yml0IGludCAoYXMgYW4gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpLlxuICAgICAgICAvL1xuXG4gICAgICAgIG0gPSBbbVswXSA+Pj4gMTYsIG1bMF0gJiAweGZmZmYsIG1bMV0gPj4+IDE2LCBtWzFdICYgMHhmZmZmXTtcbiAgICAgICAgbiA9IFtuWzBdID4+PiAxNiwgblswXSAmIDB4ZmZmZiwgblsxXSA+Pj4gMTYsIG5bMV0gJiAweGZmZmZdO1xuICAgICAgICB2YXIgbyA9IFswLCAwLCAwLCAwXTtcblxuICAgICAgICBvWzNdICs9IG1bM10gKiBuWzNdO1xuICAgICAgICBvWzJdICs9IG9bM10gPj4+IDE2O1xuICAgICAgICBvWzNdICY9IDB4ZmZmZjtcblxuICAgICAgICBvWzJdICs9IG1bMl0gKiBuWzNdO1xuICAgICAgICBvWzFdICs9IG9bMl0gPj4+IDE2O1xuICAgICAgICBvWzJdICY9IDB4ZmZmZjtcblxuICAgICAgICBvWzJdICs9IG1bM10gKiBuWzJdO1xuICAgICAgICBvWzFdICs9IG9bMl0gPj4+IDE2O1xuICAgICAgICBvWzJdICY9IDB4ZmZmZjtcblxuICAgICAgICBvWzFdICs9IG1bMV0gKiBuWzNdO1xuICAgICAgICBvWzBdICs9IG9bMV0gPj4+IDE2O1xuICAgICAgICBvWzFdICY9IDB4ZmZmZjtcblxuICAgICAgICBvWzFdICs9IG1bMl0gKiBuWzJdO1xuICAgICAgICBvWzBdICs9IG9bMV0gPj4+IDE2O1xuICAgICAgICBvWzFdICY9IDB4ZmZmZjtcblxuICAgICAgICBvWzFdICs9IG1bM10gKiBuWzFdO1xuICAgICAgICBvWzBdICs9IG9bMV0gPj4+IDE2O1xuICAgICAgICBvWzFdICY9IDB4ZmZmZjtcblxuICAgICAgICBvWzBdICs9IChtWzBdICogblszXSkgKyAobVsxXSAqIG5bMl0pICsgKG1bMl0gKiBuWzFdKSArIChtWzNdICogblswXSk7XG4gICAgICAgIG9bMF0gJj0gMHhmZmZmO1xuXG4gICAgICAgIHJldHVybiBbKG9bMF0gPDwgMTYpIHwgb1sxXSwgKG9bMl0gPDwgMTYpIHwgb1szXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3g2NFJvdGwobSwgbikge1xuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiBhIDY0Yml0IGludCAoYXMgYW4gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpIGFuZCBhbiBpbnRcbiAgICAgICAgLy8gcmVwcmVzZW50aW5nIGEgbnVtYmVyIG9mIGJpdCBwb3NpdGlvbnMsIHJldHVybnMgdGhlIDY0Yml0IGludCAoYXMgYW5cbiAgICAgICAgLy8gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpIHJvdGF0ZWQgbGVmdCBieSB0aGF0IG51bWJlciBvZiBwb3NpdGlvbnMuXG4gICAgICAgIC8vXG5cbiAgICAgICAgbiAlPSA2NDtcblxuICAgICAgICBpZiAobiA9PT0gMzIpIHtcbiAgICAgICAgICAgIHJldHVybiBbbVsxXSwgbVswXV07XG4gICAgICAgIH0gZWxzZSBpZiAobiA8IDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gWyhtWzBdIDw8IG4pIHwgKG1bMV0gPj4+ICgzMiAtIG4pKSwgKG1bMV0gPDwgbikgfCAobVswXSA+Pj4gKDMyIC0gbikpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG4gLT0gMzI7XG4gICAgICAgICAgICByZXR1cm4gWyhtWzFdIDw8IG4pIHwgKG1bMF0gPj4+ICgzMiAtIG4pKSwgKG1bMF0gPDwgbikgfCAobVsxXSA+Pj4gKDMyIC0gbikpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF94NjRMZWZ0U2hpZnQobSwgbikge1xuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiBhIDY0Yml0IGludCAoYXMgYW4gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpIGFuZCBhbiBpbnRcbiAgICAgICAgLy8gcmVwcmVzZW50aW5nIGEgbnVtYmVyIG9mIGJpdCBwb3NpdGlvbnMsIHJldHVybnMgdGhlIDY0Yml0IGludCAoYXMgYW5cbiAgICAgICAgLy8gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpIHNoaWZ0ZWQgbGVmdCBieSB0aGF0IG51bWJlciBvZiBwb3NpdGlvbnMuXG4gICAgICAgIC8vXG5cbiAgICAgICAgbiAlPSA2NDtcblxuICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH0gZWxzZSBpZiAobiA8IDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gWyhtWzBdIDw8IG4pIHwgKG1bMV0gPj4+ICgzMiAtIG4pKSwgbVsxXSA8PCBuXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbbVsxXSA8PCAobiAtIDMyKSwgMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfeDY0WG9yKG0sIG4pIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gR2l2ZW4gdHdvIDY0Yml0IGludHMgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKSByZXR1cm5zIHRoZSB0d29cbiAgICAgICAgLy8geG9yZWQgdG9nZXRoZXIgYXMgYSA2NGJpdCBpbnQgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKS5cbiAgICAgICAgLy9cblxuICAgICAgICByZXR1cm4gW21bMF0gXiBuWzBdLCBtWzFdIF4gblsxXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3g2NEZtaXgoaCkge1xuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiBhIGJsb2NrLCByZXR1cm5zIG11cm11ckhhc2gzJ3MgZmluYWwgeDY0IG1peCBvZiB0aGF0IGJsb2NrLlxuICAgICAgICAvLyAoYFswLCBoWzBdID4+PiAxXWAgaXMgYSAzMyBiaXQgdW5zaWduZWQgcmlnaHQgc2hpZnQuIFRoaXMgaXMgdGhlXG4gICAgICAgIC8vIG9ubHkgcGxhY2Ugd2hlcmUgd2UgbmVlZCB0byByaWdodCBzaGlmdCA2NGJpdCBpbnRzLilcbiAgICAgICAgLy9cblxuICAgICAgICBoID0gX3g2NFhvcihoLCBbMCwgaFswXSA+Pj4gMV0pO1xuICAgICAgICBoID0gX3g2NE11bHRpcGx5KGgsIFsweGZmNTFhZmQ3LCAweGVkNTU4Y2NkXSk7XG4gICAgICAgIGggPSBfeDY0WG9yKGgsIFswLCBoWzBdID4+PiAxXSk7XG4gICAgICAgIGggPSBfeDY0TXVsdGlwbHkoaCwgWzB4YzRjZWI5ZmUsIDB4MWE4NWVjNTNdKTtcbiAgICAgICAgaCA9IF94NjRYb3IoaCwgWzAsIGhbMF0gPj4+IDFdKTtcblxuICAgICAgICByZXR1cm4gaDtcbiAgICB9XG5cbiAgICAvLyBQVUJMSUMgRlVOQ1RJT05TXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbGlicmFyeS54ODYuaGFzaDMyID0gZnVuY3Rpb24gKGJ5dGVzLCBzZWVkKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEdpdmVuIGEgc3RyaW5nIGFuZCBhbiBvcHRpb25hbCBzZWVkIGFzIGFuIGludCwgcmV0dXJucyBhIDMyIGJpdCBoYXNoXG4gICAgICAgIC8vIHVzaW5nIHRoZSB4ODYgZmxhdm9yIG9mIE11cm11ckhhc2gzLCBhcyBhbiB1bnNpZ25lZCBpbnQuXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChsaWJyYXJ5LmlucHV0VmFsaWRhdGlvbiAmJiAhX3ZhbGlkQnl0ZXMoYnl0ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHNlZWQgPSBzZWVkIHx8IDA7XG5cbiAgICAgICAgdmFyIHJlbWFpbmRlciA9IGJ5dGVzLmxlbmd0aCAlIDQ7XG4gICAgICAgIHZhciBibG9ja3MgPSBieXRlcy5sZW5ndGggLSByZW1haW5kZXI7XG5cbiAgICAgICAgdmFyIGgxID0gc2VlZDtcblxuICAgICAgICB2YXIgazEgPSAwO1xuXG4gICAgICAgIHZhciBjMSA9IDB4Y2M5ZTJkNTE7XG4gICAgICAgIHZhciBjMiA9IDB4MWI4NzM1OTM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3M7IGkgPSBpICsgNCkge1xuICAgICAgICAgICAgazEgPSAoYnl0ZXNbaV0pIHwgKGJ5dGVzW2kgKyAxXSA8PCA4KSB8IChieXRlc1tpICsgMl0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAzXSA8PCAyNCk7XG5cbiAgICAgICAgICAgIGsxID0gX3g4Nk11bHRpcGx5KGsxLCBjMSk7XG4gICAgICAgICAgICBrMSA9IF94ODZSb3RsKGsxLCAxNSk7XG4gICAgICAgICAgICBrMSA9IF94ODZNdWx0aXBseShrMSwgYzIpO1xuXG4gICAgICAgICAgICBoMSBePSBrMTtcbiAgICAgICAgICAgIGgxID0gX3g4NlJvdGwoaDEsIDEzKTtcbiAgICAgICAgICAgIGgxID0gX3g4Nk11bHRpcGx5KGgxLCA1KSArIDB4ZTY1NDZiNjQ7XG4gICAgICAgIH1cblxuICAgICAgICBrMSA9IDA7XG5cbiAgICAgICAgc3dpdGNoIChyZW1haW5kZXIpIHtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBrMSBePSBieXRlc1tpICsgMl0gPDwgMTY7XG5cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBrMSBePSBieXRlc1tpICsgMV0gPDwgODtcblxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGsxIF49IGJ5dGVzW2ldO1xuICAgICAgICAgICAgICAgIGsxID0gX3g4Nk11bHRpcGx5KGsxLCBjMSk7XG4gICAgICAgICAgICAgICAgazEgPSBfeDg2Um90bChrMSwgMTUpO1xuICAgICAgICAgICAgICAgIGsxID0gX3g4Nk11bHRpcGx5KGsxLCBjMik7XG4gICAgICAgICAgICAgICAgaDEgXj0gazE7XG4gICAgICAgIH1cblxuICAgICAgICBoMSBePSBieXRlcy5sZW5ndGg7XG4gICAgICAgIGgxID0gX3g4NkZtaXgoaDEpO1xuXG4gICAgICAgIHJldHVybiBoMSA+Pj4gMDtcbiAgICB9O1xuXG4gICAgbGlicmFyeS54ODYuaGFzaDEyOCA9IGZ1bmN0aW9uIChieXRlcywgc2VlZCkge1xuICAgICAgICAvL1xuICAgICAgICAvLyBHaXZlbiBhIHN0cmluZyBhbmQgYW4gb3B0aW9uYWwgc2VlZCBhcyBhbiBpbnQsIHJldHVybnMgYSAxMjggYml0XG4gICAgICAgIC8vIGhhc2ggdXNpbmcgdGhlIHg4NiBmbGF2b3Igb2YgTXVybXVySGFzaDMsIGFzIGFuIHVuc2lnbmVkIGhleC5cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKGxpYnJhcnkuaW5wdXRWYWxpZGF0aW9uICYmICFfdmFsaWRCeXRlcyhieXRlcykpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzZWVkID0gc2VlZCB8fCAwO1xuICAgICAgICB2YXIgcmVtYWluZGVyID0gYnl0ZXMubGVuZ3RoICUgMTY7XG4gICAgICAgIHZhciBibG9ja3MgPSBieXRlcy5sZW5ndGggLSByZW1haW5kZXI7XG5cbiAgICAgICAgdmFyIGgxID0gc2VlZDtcbiAgICAgICAgdmFyIGgyID0gc2VlZDtcbiAgICAgICAgdmFyIGgzID0gc2VlZDtcbiAgICAgICAgdmFyIGg0ID0gc2VlZDtcblxuICAgICAgICB2YXIgazEgPSAwO1xuICAgICAgICB2YXIgazIgPSAwO1xuICAgICAgICB2YXIgazMgPSAwO1xuICAgICAgICB2YXIgazQgPSAwO1xuXG4gICAgICAgIHZhciBjMSA9IDB4MjM5Yjk2MWI7XG4gICAgICAgIHZhciBjMiA9IDB4YWIwZTk3ODk7XG4gICAgICAgIHZhciBjMyA9IDB4MzhiMzRhZTU7XG4gICAgICAgIHZhciBjNCA9IDB4YTFlMzhiOTM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3M7IGkgPSBpICsgMTYpIHtcbiAgICAgICAgICAgIGsxID0gKGJ5dGVzW2ldKSB8IChieXRlc1tpICsgMV0gPDwgOCkgfCAoYnl0ZXNbaSArIDJdIDw8IDE2KSB8IChieXRlc1tpICsgM10gPDwgMjQpO1xuICAgICAgICAgICAgazIgPSAoYnl0ZXNbaSArIDRdKSB8IChieXRlc1tpICsgNV0gPDwgOCkgfCAoYnl0ZXNbaSArIDZdIDw8IDE2KSB8IChieXRlc1tpICsgN10gPDwgMjQpO1xuICAgICAgICAgICAgazMgPSAoYnl0ZXNbaSArIDhdKSB8IChieXRlc1tpICsgOV0gPDwgOCkgfCAoYnl0ZXNbaSArIDEwXSA8PCAxNikgfCAoYnl0ZXNbaSArIDExXSA8PCAyNCk7XG4gICAgICAgICAgICBrNCA9IChieXRlc1tpICsgMTJdKSB8IChieXRlc1tpICsgMTNdIDw8IDgpIHwgKGJ5dGVzW2kgKyAxNF0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAxNV0gPDwgMjQpO1xuXG4gICAgICAgICAgICBrMSA9IF94ODZNdWx0aXBseShrMSwgYzEpO1xuICAgICAgICAgICAgazEgPSBfeDg2Um90bChrMSwgMTUpO1xuICAgICAgICAgICAgazEgPSBfeDg2TXVsdGlwbHkoazEsIGMyKTtcbiAgICAgICAgICAgIGgxIF49IGsxO1xuXG4gICAgICAgICAgICBoMSA9IF94ODZSb3RsKGgxLCAxOSk7XG4gICAgICAgICAgICBoMSArPSBoMjtcbiAgICAgICAgICAgIGgxID0gX3g4Nk11bHRpcGx5KGgxLCA1KSArIDB4NTYxY2NkMWI7XG5cbiAgICAgICAgICAgIGsyID0gX3g4Nk11bHRpcGx5KGsyLCBjMik7XG4gICAgICAgICAgICBrMiA9IF94ODZSb3RsKGsyLCAxNik7XG4gICAgICAgICAgICBrMiA9IF94ODZNdWx0aXBseShrMiwgYzMpO1xuICAgICAgICAgICAgaDIgXj0gazI7XG5cbiAgICAgICAgICAgIGgyID0gX3g4NlJvdGwoaDIsIDE3KTtcbiAgICAgICAgICAgIGgyICs9IGgzO1xuICAgICAgICAgICAgaDIgPSBfeDg2TXVsdGlwbHkoaDIsIDUpICsgMHgwYmNhYTc0NztcblxuICAgICAgICAgICAgazMgPSBfeDg2TXVsdGlwbHkoazMsIGMzKTtcbiAgICAgICAgICAgIGszID0gX3g4NlJvdGwoazMsIDE3KTtcbiAgICAgICAgICAgIGszID0gX3g4Nk11bHRpcGx5KGszLCBjNCk7XG4gICAgICAgICAgICBoMyBePSBrMztcblxuICAgICAgICAgICAgaDMgPSBfeDg2Um90bChoMywgMTUpO1xuICAgICAgICAgICAgaDMgKz0gaDQ7XG4gICAgICAgICAgICBoMyA9IF94ODZNdWx0aXBseShoMywgNSkgKyAweDk2Y2QxYzM1O1xuXG4gICAgICAgICAgICBrNCA9IF94ODZNdWx0aXBseShrNCwgYzQpO1xuICAgICAgICAgICAgazQgPSBfeDg2Um90bChrNCwgMTgpO1xuICAgICAgICAgICAgazQgPSBfeDg2TXVsdGlwbHkoazQsIGMxKTtcbiAgICAgICAgICAgIGg0IF49IGs0O1xuXG4gICAgICAgICAgICBoNCA9IF94ODZSb3RsKGg0LCAxMyk7XG4gICAgICAgICAgICBoNCArPSBoMTtcbiAgICAgICAgICAgIGg0ID0gX3g4Nk11bHRpcGx5KGg0LCA1KSArIDB4MzJhYzNiMTc7XG4gICAgICAgIH1cblxuICAgICAgICBrMSA9IDA7XG4gICAgICAgIGsyID0gMDtcbiAgICAgICAgazMgPSAwO1xuICAgICAgICBrNCA9IDA7XG5cbiAgICAgICAgc3dpdGNoIChyZW1haW5kZXIpIHtcbiAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgazQgXj0gYnl0ZXNbaSArIDE0XSA8PCAxNjtcblxuICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICBrNCBePSBieXRlc1tpICsgMTNdIDw8IDg7XG5cbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgazQgXj0gYnl0ZXNbaSArIDEyXTtcbiAgICAgICAgICAgICAgICBrNCA9IF94ODZNdWx0aXBseShrNCwgYzQpO1xuICAgICAgICAgICAgICAgIGs0ID0gX3g4NlJvdGwoazQsIDE4KTtcbiAgICAgICAgICAgICAgICBrNCA9IF94ODZNdWx0aXBseShrNCwgYzEpO1xuICAgICAgICAgICAgICAgIGg0IF49IGs0O1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIGszIF49IGJ5dGVzW2kgKyAxMV0gPDwgMjQ7XG5cbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgazMgXj0gYnl0ZXNbaSArIDEwXSA8PCAxNjtcblxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICBrMyBePSBieXRlc1tpICsgOV0gPDwgODtcblxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGszIF49IGJ5dGVzW2kgKyA4XTtcbiAgICAgICAgICAgICAgICBrMyA9IF94ODZNdWx0aXBseShrMywgYzMpO1xuICAgICAgICAgICAgICAgIGszID0gX3g4NlJvdGwoazMsIDE3KTtcbiAgICAgICAgICAgICAgICBrMyA9IF94ODZNdWx0aXBseShrMywgYzQpO1xuICAgICAgICAgICAgICAgIGgzIF49IGszO1xuXG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgazIgXj0gYnl0ZXNbaSArIDddIDw8IDI0O1xuXG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgazIgXj0gYnl0ZXNbaSArIDZdIDw8IDE2O1xuXG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgazIgXj0gYnl0ZXNbaSArIDVdIDw8IDg7XG5cbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBrMiBePSBieXRlc1tpICsgNF07XG4gICAgICAgICAgICAgICAgazIgPSBfeDg2TXVsdGlwbHkoazIsIGMyKTtcbiAgICAgICAgICAgICAgICBrMiA9IF94ODZSb3RsKGsyLCAxNik7XG4gICAgICAgICAgICAgICAgazIgPSBfeDg2TXVsdGlwbHkoazIsIGMzKTtcbiAgICAgICAgICAgICAgICBoMiBePSBrMjtcblxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGsxIF49IGJ5dGVzW2kgKyAzXSA8PCAyNDtcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGsxIF49IGJ5dGVzW2kgKyAyXSA8PCAxNjtcblxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGsxIF49IGJ5dGVzW2kgKyAxXSA8PCA4O1xuXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgazEgXj0gYnl0ZXNbaV07XG4gICAgICAgICAgICAgICAgazEgPSBfeDg2TXVsdGlwbHkoazEsIGMxKTtcbiAgICAgICAgICAgICAgICBrMSA9IF94ODZSb3RsKGsxLCAxNSk7XG4gICAgICAgICAgICAgICAgazEgPSBfeDg2TXVsdGlwbHkoazEsIGMyKTtcbiAgICAgICAgICAgICAgICBoMSBePSBrMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGgxIF49IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgaDIgXj0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICBoMyBePSBieXRlcy5sZW5ndGg7XG4gICAgICAgIGg0IF49IGJ5dGVzLmxlbmd0aDtcblxuICAgICAgICBoMSArPSBoMjtcbiAgICAgICAgaDEgKz0gaDM7XG4gICAgICAgIGgxICs9IGg0O1xuICAgICAgICBoMiArPSBoMTtcbiAgICAgICAgaDMgKz0gaDE7XG4gICAgICAgIGg0ICs9IGgxO1xuXG4gICAgICAgIGgxID0gX3g4NkZtaXgoaDEpO1xuICAgICAgICBoMiA9IF94ODZGbWl4KGgyKTtcbiAgICAgICAgaDMgPSBfeDg2Rm1peChoMyk7XG4gICAgICAgIGg0ID0gX3g4NkZtaXgoaDQpO1xuXG4gICAgICAgIGgxICs9IGgyO1xuICAgICAgICBoMSArPSBoMztcbiAgICAgICAgaDEgKz0gaDQ7XG4gICAgICAgIGgyICs9IGgxO1xuICAgICAgICBoMyArPSBoMTtcbiAgICAgICAgaDQgKz0gaDE7XG5cbiAgICAgICAgcmV0dXJuIChcIjAwMDAwMDAwXCIgKyAoaDEgPj4+IDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTgpICsgKFwiMDAwMDAwMDBcIiArIChoMiA+Pj4gMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtOCkgKyAoXCIwMDAwMDAwMFwiICsgKGgzID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KSArIChcIjAwMDAwMDAwXCIgKyAoaDQgPj4+IDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTgpO1xuICAgIH07XG5cbiAgICBsaWJyYXJ5Lng2NC5oYXNoMTI4ID0gZnVuY3Rpb24gKGJ5dGVzLCBzZWVkKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEdpdmVuIGEgc3RyaW5nIGFuZCBhbiBvcHRpb25hbCBzZWVkIGFzIGFuIGludCwgcmV0dXJucyBhIDEyOCBiaXRcbiAgICAgICAgLy8gaGFzaCB1c2luZyB0aGUgeDY0IGZsYXZvciBvZiBNdXJtdXJIYXNoMywgYXMgYW4gdW5zaWduZWQgaGV4LlxuICAgICAgICAvL1xuICAgICAgICBpZiAobGlicmFyeS5pbnB1dFZhbGlkYXRpb24gJiYgIV92YWxpZEJ5dGVzKGJ5dGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBzZWVkID0gc2VlZCB8fCAwO1xuXG4gICAgICAgIHZhciByZW1haW5kZXIgPSBieXRlcy5sZW5ndGggJSAxNjtcbiAgICAgICAgdmFyIGJsb2NrcyA9IGJ5dGVzLmxlbmd0aCAtIHJlbWFpbmRlcjtcblxuICAgICAgICB2YXIgaDEgPSBbMCwgc2VlZF07XG4gICAgICAgIHZhciBoMiA9IFswLCBzZWVkXTtcblxuICAgICAgICB2YXIgazEgPSBbMCwgMF07XG4gICAgICAgIHZhciBrMiA9IFswLCAwXTtcblxuICAgICAgICB2YXIgYzEgPSBbMHg4N2MzN2I5MSwgMHgxMTQyNTNkNV07XG4gICAgICAgIHZhciBjMiA9IFsweDRjZjVhZDQzLCAweDI3NDU5MzdmXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrczsgaSA9IGkgKyAxNikge1xuICAgICAgICAgICAgazEgPSBbKGJ5dGVzW2kgKyA0XSkgfCAoYnl0ZXNbaSArIDVdIDw8IDgpIHwgKGJ5dGVzW2kgKyA2XSA8PCAxNikgfCAoYnl0ZXNbaSArIDddIDw8IDI0KSwgKGJ5dGVzW2ldKSB8XG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgKyAxXSA8PCA4KSB8IChieXRlc1tpICsgMl0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAzXSA8PCAyNCldO1xuICAgICAgICAgICAgazIgPSBbKGJ5dGVzW2kgKyAxMl0pIHwgKGJ5dGVzW2kgKyAxM10gPDwgOCkgfCAoYnl0ZXNbaSArIDE0XSA8PCAxNikgfCAoYnl0ZXNbaSArIDE1XSA8PCAyNCksIChieXRlc1tpICsgOF0pIHxcbiAgICAgICAgICAgICAgICAoYnl0ZXNbaSArIDldIDw8IDgpIHwgKGJ5dGVzW2kgKyAxMF0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAxMV0gPDwgMjQpXTtcblxuICAgICAgICAgICAgazEgPSBfeDY0TXVsdGlwbHkoazEsIGMxKTtcbiAgICAgICAgICAgIGsxID0gX3g2NFJvdGwoazEsIDMxKTtcbiAgICAgICAgICAgIGsxID0gX3g2NE11bHRpcGx5KGsxLCBjMik7XG4gICAgICAgICAgICBoMSA9IF94NjRYb3IoaDEsIGsxKTtcblxuICAgICAgICAgICAgaDEgPSBfeDY0Um90bChoMSwgMjcpO1xuICAgICAgICAgICAgaDEgPSBfeDY0QWRkKGgxLCBoMik7XG4gICAgICAgICAgICBoMSA9IF94NjRBZGQoX3g2NE11bHRpcGx5KGgxLCBbMCwgNV0pLCBbMCwgMHg1MmRjZTcyOV0pO1xuXG4gICAgICAgICAgICBrMiA9IF94NjRNdWx0aXBseShrMiwgYzIpO1xuICAgICAgICAgICAgazIgPSBfeDY0Um90bChrMiwgMzMpO1xuICAgICAgICAgICAgazIgPSBfeDY0TXVsdGlwbHkoazIsIGMxKTtcbiAgICAgICAgICAgIGgyID0gX3g2NFhvcihoMiwgazIpO1xuXG4gICAgICAgICAgICBoMiA9IF94NjRSb3RsKGgyLCAzMSk7XG4gICAgICAgICAgICBoMiA9IF94NjRBZGQoaDIsIGgxKTtcbiAgICAgICAgICAgIGgyID0gX3g2NEFkZChfeDY0TXVsdGlwbHkoaDIsIFswLCA1XSksIFswLCAweDM4NDk1YWI1XSk7XG4gICAgICAgIH1cblxuICAgICAgICBrMSA9IFswLCAwXTtcbiAgICAgICAgazIgPSBbMCwgMF07XG5cbiAgICAgICAgc3dpdGNoIChyZW1haW5kZXIpIHtcbiAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgazIgPSBfeDY0WG9yKGsyLCBfeDY0TGVmdFNoaWZ0KFswLCBieXRlc1tpICsgMTRdXSwgNDgpKTtcblxuICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICBrMiA9IF94NjRYb3IoazIsIF94NjRMZWZ0U2hpZnQoWzAsIGJ5dGVzW2kgKyAxM11dLCA0MCkpO1xuXG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGsyID0gX3g2NFhvcihrMiwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDEyXV0sIDMyKSk7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgazIgPSBfeDY0WG9yKGsyLCBfeDY0TGVmdFNoaWZ0KFswLCBieXRlc1tpICsgMTFdXSwgMjQpKTtcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBrMiA9IF94NjRYb3IoazIsIF94NjRMZWZ0U2hpZnQoWzAsIGJ5dGVzW2kgKyAxMF1dLCAxNikpO1xuXG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIGsyID0gX3g2NFhvcihrMiwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDldXSwgOCkpO1xuXG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgazIgPSBfeDY0WG9yKGsyLCBbMCwgYnl0ZXNbaSArIDhdXSk7XG4gICAgICAgICAgICAgICAgazIgPSBfeDY0TXVsdGlwbHkoazIsIGMyKTtcbiAgICAgICAgICAgICAgICBrMiA9IF94NjRSb3RsKGsyLCAzMyk7XG4gICAgICAgICAgICAgICAgazIgPSBfeDY0TXVsdGlwbHkoazIsIGMxKTtcbiAgICAgICAgICAgICAgICBoMiA9IF94NjRYb3IoaDIsIGsyKTtcblxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDddXSwgNTYpKTtcblxuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDZdXSwgNDgpKTtcblxuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDVdXSwgNDApKTtcblxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDRdXSwgMzIpKTtcblxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDNdXSwgMjQpKTtcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDJdXSwgMTYpKTtcblxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGsxID0gX3g2NFhvcihrMSwgX3g2NExlZnRTaGlmdChbMCwgYnl0ZXNbaSArIDFdXSwgOCkpO1xuXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgazEgPSBfeDY0WG9yKGsxLCBbMCwgYnl0ZXNbaV1dKTtcbiAgICAgICAgICAgICAgICBrMSA9IF94NjRNdWx0aXBseShrMSwgYzEpO1xuICAgICAgICAgICAgICAgIGsxID0gX3g2NFJvdGwoazEsIDMxKTtcbiAgICAgICAgICAgICAgICBrMSA9IF94NjRNdWx0aXBseShrMSwgYzIpO1xuICAgICAgICAgICAgICAgIGgxID0gX3g2NFhvcihoMSwgazEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaDEgPSBfeDY0WG9yKGgxLCBbMCwgYnl0ZXMubGVuZ3RoXSk7XG4gICAgICAgIGgyID0gX3g2NFhvcihoMiwgWzAsIGJ5dGVzLmxlbmd0aF0pO1xuXG4gICAgICAgIGgxID0gX3g2NEFkZChoMSwgaDIpO1xuICAgICAgICBoMiA9IF94NjRBZGQoaDIsIGgxKTtcblxuICAgICAgICBoMSA9IF94NjRGbWl4KGgxKTtcbiAgICAgICAgaDIgPSBfeDY0Rm1peChoMik7XG5cbiAgICAgICAgaDEgPSBfeDY0QWRkKGgxLCBoMik7XG4gICAgICAgIGgyID0gX3g2NEFkZChoMiwgaDEpO1xuXG4gICAgICAgIHJldHVybiAoXCIwMDAwMDAwMFwiICsgKGgxWzBdID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KSArIChcIjAwMDAwMDAwXCIgKyAoaDFbMV0gPj4+IDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTgpICsgKFwiMDAwMDAwMDBcIiArIChoMlswXSA+Pj4gMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtOCkgKyAoXCIwMDAwMDAwMFwiICsgKGgyWzFdID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KTtcbiAgICB9O1xuXG4gICAgLy8gSU5JVElBTElaQVRJT05cbiAgICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gRXhwb3J0IG11cm11ckhhc2gzIGZvciBDb21tb25KUywgZWl0aGVyIGFzIGFuIEFNRCBtb2R1bGUgb3IganVzdCBhcyBwYXJ0XG4gICAgLy8gb2YgdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbGlicmFyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydHMubXVybXVySGFzaDMgPSBsaWJyYXJ5O1xuXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBsaWJyYXJ5O1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIFVzZSBtdXJtdXJIYXNoMy5ub0NvbmZsaWN0IHRvIHJlc3RvcmUgYG11cm11ckhhc2gzYCBiYWNrIHRvIGl0c1xuICAgICAgICAvLyBvcmlnaW5hbCB2YWx1ZS4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgbGlicmFyeSBvYmplY3QsIHRvIGFsbG93XG4gICAgICAgIC8vIGl0IHRvIGJlIHVzZWQgdW5kZXIgYSBkaWZmZXJlbnQgbmFtZS5cbiAgICAgICAgbGlicmFyeS5fbXVybXVySGFzaDMgPSByb290Lm11cm11ckhhc2gzO1xuXG4gICAgICAgIGxpYnJhcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJvb3QubXVybXVySGFzaDMgPSBsaWJyYXJ5Ll9tdXJtdXJIYXNoMztcbiAgICAgICAgICAgIGxpYnJhcnkuX211cm11ckhhc2gzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGlicmFyeS5ub0NvbmZsaWN0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4gbGlicmFyeTtcbiAgICAgICAgfTtcblxuICAgICAgICByb290Lm11cm11ckhhc2gzID0gbGlicmFyeTtcbiAgICB9XG59KSh0aGlzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/murmurhash3js-revisited/lib/murmurHash3js.js\n");

/***/ })

};
;